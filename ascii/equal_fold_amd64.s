// Code generated by command: go run equal_fold_asm.go -pkg ascii -out ../ascii/equal_fold_amd64.s -stubs ../ascii/equal_fold_amd64.go. DO NOT EDIT.

// +build !purego

#include "textflag.h"

// func equalFoldString(a string, b string, abi uint64) bool
// Requires: AVX, AVX2, SSE4.1
TEXT ·equalFoldString(SB), NOSPLIT, $0-41
	MOVQ abi+32(FP), AX
	MOVQ a_base+0(FP), DX
	MOVQ a_len+8(FP), BX
	MOVQ b_base+16(FP), SI
	CMPQ BX, b_len+24(FP)
	JNE  done
	XORQ AX, AX
	CMPQ BX, $0x10
	JB   init_x86
	BTL  $0x08, github·com∕segmentio∕asm∕cpu·X86+0(SB)
	JCS  init_avx

init_x86:
	LEAQ github·com∕segmentio∕asm∕ascii·lowerCase+0(SB), R9
	XORL CX, CX

cmp8:
	CMPQ    BX, $0x08
	JB      cmp7
	MOVBLZX (DX)(AX*1), DI
	MOVBLZX (SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL
	MOVBLZX 1(DX)(AX*1), DI
	MOVBLZX 1(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL
	MOVBLZX 2(DX)(AX*1), DI
	MOVBLZX 2(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL
	MOVBLZX 3(DX)(AX*1), DI
	MOVBLZX 3(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL
	MOVBLZX 4(DX)(AX*1), DI
	MOVBLZX 4(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL
	MOVBLZX 5(DX)(AX*1), DI
	MOVBLZX 5(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL
	MOVBLZX 6(DX)(AX*1), DI
	MOVBLZX 6(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL
	MOVBLZX 7(DX)(AX*1), DI
	MOVBLZX 7(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL
	JNE     done
	ADDQ    $0x08, AX
	SUBQ    $0x08, BX
	JMP     cmp8

cmp7:
	CMPQ    BX, $0x07
	JB      cmp6
	MOVBLZX 6(DX)(AX*1), DI
	MOVBLZX 6(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL

cmp6:
	CMPQ    BX, $0x06
	JB      cmp5
	MOVBLZX 5(DX)(AX*1), DI
	MOVBLZX 5(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL

cmp5:
	CMPQ    BX, $0x05
	JB      cmp4
	MOVBLZX 4(DX)(AX*1), DI
	MOVBLZX 4(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL

cmp4:
	CMPQ    BX, $0x04
	JB      cmp3
	MOVBLZX 3(DX)(AX*1), DI
	MOVBLZX 3(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL

cmp3:
	CMPQ    BX, $0x03
	JB      cmp2
	MOVBLZX 2(DX)(AX*1), DI
	MOVBLZX 2(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL

cmp2:
	CMPQ    BX, $0x02
	JB      cmp1
	MOVBLZX 1(DX)(AX*1), DI
	MOVBLZX 1(SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL

cmp1:
	CMPQ    BX, $0x01
	JB      success
	MOVBLZX (DX)(AX*1), DI
	MOVBLZX (SI)(AX*1), R8
	MOVB    (R9)(DI*1), DI
	XORB    (R9)(R8*1), DI
	ORB     DI, CL

done:
	SETEQ ret+40(FP)
	RET

success:
	MOVB $0x01, ret+40(FP)
	RET

init_avx:
	MOVB         $0x20, CL
	PINSRB       $0x00, CX, X12
	VPBROADCASTB X12, Y12
	MOVB         $0x1f, CL
	PINSRB       $0x00, CX, X13
	VPBROADCASTB X13, Y13
	MOVB         $0x9a, CL
	PINSRB       $0x00, CX, X14
	VPBROADCASTB X14, Y14
	MOVB         $0x01, CL
	PINSRB       $0x00, CX, X15
	VPBROADCASTB X15, Y15

cmp128:
	CMPQ      BX, $0x80
	JB        cmp64
	VMOVDQU   (DX)(AX*1), Y0
	VMOVDQU   32(DX)(AX*1), Y1
	VMOVDQU   64(DX)(AX*1), Y2
	VMOVDQU   96(DX)(AX*1), Y3
	VMOVDQU   (SI)(AX*1), Y4
	VMOVDQU   32(SI)(AX*1), Y5
	VMOVDQU   64(SI)(AX*1), Y6
	VMOVDQU   96(SI)(AX*1), Y7
	VXORPD    Y0, Y4, Y4
	VPCMPEQB  Y12, Y4, Y8
	VORPD     Y12, Y0, Y0
	VPADDB    Y13, Y0, Y0
	VPCMPGTB  Y0, Y14, Y0
	VPAND     Y8, Y0, Y0
	VPAND     Y15, Y0, Y0
	VPSLLW    $0x05, Y0, Y0
	VPCMPEQB  Y4, Y0, Y0
	VXORPD    Y1, Y5, Y5
	VPCMPEQB  Y12, Y5, Y9
	VORPD     Y12, Y1, Y1
	VPADDB    Y13, Y1, Y1
	VPCMPGTB  Y1, Y14, Y1
	VPAND     Y9, Y1, Y1
	VPAND     Y15, Y1, Y1
	VPSLLW    $0x05, Y1, Y1
	VPCMPEQB  Y5, Y1, Y1
	VXORPD    Y2, Y6, Y6
	VPCMPEQB  Y12, Y6, Y10
	VORPD     Y12, Y2, Y2
	VPADDB    Y13, Y2, Y2
	VPCMPGTB  Y2, Y14, Y2
	VPAND     Y10, Y2, Y2
	VPAND     Y15, Y2, Y2
	VPSLLW    $0x05, Y2, Y2
	VPCMPEQB  Y6, Y2, Y2
	VXORPD    Y3, Y7, Y7
	VPCMPEQB  Y12, Y7, Y11
	VORPD     Y12, Y3, Y3
	VPADDB    Y13, Y3, Y3
	VPCMPGTB  Y3, Y14, Y3
	VPAND     Y11, Y3, Y3
	VPAND     Y15, Y3, Y3
	VPSLLW    $0x05, Y3, Y3
	VPCMPEQB  Y7, Y3, Y3
	VPAND     Y1, Y0, Y0
	VPAND     Y3, Y2, Y2
	VPAND     Y2, Y0, Y0
	ADDQ      $0x80, AX
	SUBQ      $0x80, BX
	VPMOVMSKB Y0, CX
	XORL      $0xffffffff, CX
	JNE       done
	JMP       cmp128

cmp64:
	CMPQ      BX, $0x40
	JB        cmp32
	VMOVDQU   (DX)(AX*1), Y0
	VMOVDQU   32(DX)(AX*1), Y1
	VMOVDQU   (SI)(AX*1), Y2
	VMOVDQU   32(SI)(AX*1), Y3
	VXORPD    Y0, Y2, Y2
	VPCMPEQB  Y12, Y2, Y4
	VORPD     Y12, Y0, Y0
	VPADDB    Y13, Y0, Y0
	VPCMPGTB  Y0, Y14, Y0
	VPAND     Y4, Y0, Y0
	VPAND     Y15, Y0, Y0
	VPSLLW    $0x05, Y0, Y0
	VPCMPEQB  Y2, Y0, Y0
	VXORPD    Y1, Y3, Y3
	VPCMPEQB  Y12, Y3, Y5
	VORPD     Y12, Y1, Y1
	VPADDB    Y13, Y1, Y1
	VPCMPGTB  Y1, Y14, Y1
	VPAND     Y5, Y1, Y1
	VPAND     Y15, Y1, Y1
	VPSLLW    $0x05, Y1, Y1
	VPCMPEQB  Y3, Y1, Y1
	VPAND     Y1, Y0, Y0
	ADDQ      $0x40, AX
	SUBQ      $0x40, BX
	VPMOVMSKB Y0, CX
	XORL      $0xffffffff, CX
	JNE       done

cmp32:
	CMPQ      BX, $0x20
	JB        cmp16
	VMOVDQU   (DX)(AX*1), Y0
	VMOVDQU   (SI)(AX*1), Y1
	VXORPD    Y0, Y1, Y1
	VPCMPEQB  Y12, Y1, Y2
	VORPD     Y12, Y0, Y0
	VPADDB    Y13, Y0, Y0
	VPCMPGTB  Y0, Y14, Y0
	VPAND     Y2, Y0, Y0
	VPAND     Y15, Y0, Y0
	VPSLLW    $0x05, Y0, Y0
	VPCMPEQB  Y1, Y0, Y0
	ADDQ      $0x20, AX
	SUBQ      $0x20, BX
	VPMOVMSKB Y0, CX
	XORL      $0xffffffff, CX
	JNE       done

cmp16:
	CMPQ      BX, $0x10
	JLE       cmp_tail
	VMOVDQU   (DX)(AX*1), X0
	VMOVDQU   (SI)(AX*1), X1
	VXORPD    X0, X1, X1
	VPCMPEQB  X12, X1, X2
	VORPD     X12, X0, X0
	VPADDB    X13, X0, X0
	VPCMPGTB  X0, X14, X0
	VPAND     X2, X0, X0
	VPAND     X15, X0, X0
	VPSLLW    $0x05, X0, X0
	VPCMPEQB  X1, X0, X0
	ADDQ      $0x10, AX
	SUBQ      $0x10, BX
	VPMOVMSKB X0, CX
	XORL      $0x0000ffff, CX
	JNE       done

cmp_tail:
	SUBQ      $0x10, BX
	ADDQ      BX, AX
	VMOVDQU   (DX)(AX*1), X0
	VMOVDQU   (SI)(AX*1), X1
	VXORPD    X0, X1, X1
	VPCMPEQB  X12, X1, X2
	VORPD     X12, X0, X0
	VPADDB    X13, X0, X0
	VPCMPGTB  X0, X14, X0
	VPAND     X2, X0, X0
	VPAND     X15, X0, X0
	VPSLLW    $0x05, X0, X0
	VPCMPEQB  X1, X0, X0
	VPMOVMSKB X0, AX
	XORL      $0x0000ffff, AX
	JMP       done
